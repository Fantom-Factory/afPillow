Overview [#overview]
********************
'Pillow' is a web framework that maps HTTP request URIs to Pillow Pages, letting them react to RESTful events.

'Pillow'...
 - Is a [BedSheet]`http://www.fantomfactory.org/pods/afBedSheet` framework
 - Extends [efanXtra]`http://www.fantomfactory.org/pods/afEfanXtra` components
 - Plays great with [Slim]`http://www.fantomfactory.org/pods/afSlim`
 - Runs on [IoC]`http://www.fantomfactory.org/pods/afIoc`

'Pillow' - Something for your web app to get its teeth into!



Install [#install]
******************
Install 'afPillow' with the [Fantom Respository Manager]`http://fantom.org/doc/docFanr/Tool.html#install`:

  C:\> fanr install -r http://repo.status302.com/fanr/ afPillow

To use in a [Fantom]`http://fantom.org/` project, add a dependency to its 'build.fan':

  depends = ["sys 1.0", ..., "afPillow 1+"]



Quick Start [#quickStart]
*************************
Example.efan:
pre>
Hello Mum! I'm <%= age %> years old!
<pre

Example.fan:
pre>
using afIoc
using afBedSheet
using afEfanXtra
using afPillow

// ---- The only class you need! ----

@Page
const mixin Example : EfanComponent {

    @PageContext
    abstract Int age
}

// ---- Standard Main Class ----

class Main {
    Int main() {
        afBedSheet::Main().main([AppModule#.qname, "8069"])
    }
}

// ---- Support class, needed when running from a script ----

@SubModule { modules=[EfanXtraModule#, PillowModule#] }
class AppModule {
    @Contribute { serviceType=EfanTemplateDirectories# }
    static Void contributeEfanDirs(OrderedConfig config) {
        // Look for Example.efan in the same dir as this file
        config.add(`./`)
    }
}
<pre

Run the **Example.fan** script from the command line:
pre>
C:\> fan Example.fan

Efan Library: 'app' has 1 page(s):
  Example : /example
<pre

Then point your browser at `http://localhost:8069/example/42`:

  Hello Mum! I'm 42 years old!



Usage [#usage]
**************
To create a web page, define an 'EfanComponent' that is annotated with the [Page]`Page` facet. Example:

pre>
  using afPillow::Page
  using afEfanXtra::EfanComponent

  @Page
  const mixin Admin : EfanComponent {
    ...
  }
<pre

[Pages]`Page` are [efanXtra]`http://www.fantomfactory.org/pods/afEfanXtra` components and behave in exactly the same way.

'Pillow' will automatically route URLs with your page name, to your page.
Camel casing class names results in a '/' delimiter.
Examples:

  `/admin`        --> Admin.fan
  `/admin/secret` --> AdminSecret.fan

Or you can use the [@Page]`Page` facet to define an explicit URI.



Welcome Pages [#welcomePages]
*****************************
'Pillow' supports the routing of welcome pages, also known as directory pages, through the `WelcomePageStrategy`.

When switched on, whenever a request is made for a directory URI (one that ends with a /slash/) then 'Pillow' will render the
directory's [welcome page]`PillowConfigIds.welcomePageName`, which defaults to a page named 'Index'.
Examples:

  `/`        --> Index.fan
  `/admin/`  --> AdminIndex.fan

More can be read about directory URLs in the article:
[Should Your URLs Point to the Directory or the Index Page?]`http://www.thesitewizard.com/sitepromotion/directory-name-or-index-url.shtml`

The [welcome page strategy]`WelcomePageStrategy` also supports redirects, where requests for legacy pages
(like '/index.html') are redirected to the directory URI. Redirects are preferred over serving up the same page for multiple
URIs to avoid [duplicate content]`http://moz.com/learn/seo/duplicate-content`.



Page Contexts [#pageContexts]
*****************************
As seen in the [Quick Start]`#quickStart` example, parts of the request path are automatically mapped to '@PageContext' fields.
In our exmaple, the '42' in 'http://localhost:8069/example/42' is mapped to the 'age' page context field.

Declaring page context fields is actually shorthard for assigning fields manually from the '@InitRender' method.
The [Quick Start]`#quickStart` example could be re-written long hand as:

pre>
@Page
const mixin Example : EfanComponent {
    abstract Int age

    @InitRender
    Void initRender(Int age) {
        this.age = age
    }
}
<pre

Note that a Pillow Page may choose to have *either* an '@InitRender' method or '@PageContext' fields, not both.
Also note that page context objects need to be immutable ('const' classes).



Page Meta [#pageMeta]
*********************
The `PageMeta` class holds information about the Pillow Page currently being rendered.
Obviously, using 'PageMeta' in a page class, returns information about itself! Which is quite handy.

Arguably the most useful method is 'pageUri()' which returns a URI that can be used, by a client,
to render the page complete with the current page context.
You can create new PageMeta instances with different page context by using the 'withContext()' method.
Using our example again:

pre>
@Page
const mixin Example : EfanComponent {
    @Inject PageMeta pageMeta

    @PageContext
    abstract Int age

    Str renderLinkToSelf() {
        return "<a href='${pageMeta.pageUri}'>Link to 42</a>"
    }

    Str renderLinkTo69() {
        page69 := pageMeta.withContext([69]).pageUri
        return "<a href='${page69}'>Link to 69</a>"
    }
}
<pre

'PageMeta' instances are [BedSheet]`http://www.fantomfactory.org/pods/afBedSheet` response objects and may be returned from request handlers.
The handler then renders the Pillow page.
Use the 'pageMeta()' method in the `Pages` service to create PageMeta objects for arbituary pages.



Page Events [#pageEvents]
*************************
Page events allow pages to respond to RESTful actions by mapping URIs to page event methods.
Page event methods are called in the context of the page they are defined.
Denote page events with the '@PageEvent' facet.

Lets change our example so that the page context is a 'Str' and introduce an event called 'loves':

pre>
@Page
const mixin Example : EfanComponent {
    @Inject PageMeta pageMeta

    @PageContext
    abstract Str name

    @PageEvent
    Obj loves(Str obj) {
        echo("${name} loves ${obj}!")
        return pageMeta
    }
}
<pre

We can call the event using the URI 'http://localhost:8069/example/Emma/loves/sausage'.

'/example/Emma' would render the page, but should a link to '/example/Emma/loves/sausage' be clicked, then the page event 'loves' is called.

Page events may return any standard [BedSheet]`http://www.fantomfactory.org/pods/afBedSheet` response object.
Above we return the 'pageMeta' to re-render the page with a page context of 'Emma'.

Use the 'PageMeta.eventUri(name, context)' to create full event URIs that can be used by clients.



Content Type [#contentType]
***************************
Page template files should use a double extension in their name, for example,

  IndexPage.xhtml.slim

The outer extension denotes the type of templating to use, [Slim]`http://www.fantomfactory.org/pods/afSlim` in our example.
The innter extension is used to find the [Content-Type]`http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17`
that is sent in the HTTP response header. In our example, the 'Content-Type' would be set to ' application/xhtml+xml'.

If a double extension is not used, or not know, then the default content type, as defined by the config value, is used.

Or you can use the [@Page]`Page` facet to explicitly set the content type.



Release Notes [#releaseNotes]
*****************************
v1.0.2 [#v1.0.2]
----------------
 - Chg: Page context values may now be immutable / non-const objects.

v1.0.0 [#v1.0.0]
----------------
 - New: Implemented 'WelcomePageStrategy'.
 - New: Added helpful http response headers for testing.
 - Chg: 'PageUriResolver' and 'ContentTypeResolver' are now configurable.
 - Chg: Renamed ConfigId 'welcomePage' -> 'welcomePageName'.
 - Bug: Page URIs with no page context could be a directory URI.

v0.0.10 [#v0.0.10]
------------------
 - New: Added '@PageEvent' methods allowing URIs to be mapped to page methods.
 - New: Added '@PageContext' fields that can replace '@InitRender' methods.
 - New: Added the 'PageMeta' class to wrap up, um, page meta data! Oh, and attached an instance to the rendering pages. (Deleted 'RenderPageMeta'.)
 - New: Added 'PageMetaResponseProcessor' that renders Pillow pages when 'PageMeta' instances are returned as [BedSheet]`http://www.fantomfactory.org/pods/afBedSheet` response objects.
 - New: Added 'httpMethod' field to '@Page' and '@PageEvent'
 - New: Added 'template' uri to '@Page'
 - Chg: 'Page' is now a facet, incorporating fields from '@PageUri' and '@PageContentType' (which have now been deleted).

v0.0.8 [#v0.0.8]
----------------
 - New: Use the '@PageContentType' facet to explicitly define the content type for your page.
 - New: Use a double extension (e.g. 'indexPage.xhtml.slim') to set the content type for the page.
 - Bug: '@InitRender' params could incorrectly match for directory index pages.

v0.0.6 [#v0.0.6]
----------------
 - New: Page uris and BedSheet routes are generated from the '@InitRender' method signature.
 - New: Directory uris may now serve welcome pages.
 - Chg: Updated to use 'BedSheet 1.2'.
 - Chg: Renamed project to 'afPillow' (from 'afBedSheetEfanExtra').
 - Chg: Reanmed 'EfanPageMeta' to 'RenderPageMeta'.
 - Chg: Renamed 'PageRoute' to 'PageUri'.

v0.0.4 [#v0.0.4]
----------------
 - New: Added '@PageRoute' facet that lets you specify a bespoke uri
 - New: Added 'EfanPageMeta' which returns the active rendering page.

v0.0.2 [#v0.0.2]
----------------
 - New: Preview Release

